name: build
concurrency:
  group: ${{ github.workflow }}-${{ github.event.number }}-${{ github.event.ref }}
  cancel-in-progress: true
on:  # yamllint disable-line rule:truthy
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
  release:
    types: [published]

defaults:
  run:
    shell: bash

jobs:
  liblsl:
    if: ${{ github.event_name != 'pull_request' || github.event.pull_request.draft == false }}
    name: liblsl on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            cmake_extra: ""
          - os: ubuntu-22.04
            cmake_extra: ""
          - os: ubuntu-20.04
            cmake_extra: ""
          - os: macos-latest
            cmake_extra: ""
          - os: windows-latest
            cmake_extra: "-T v142,host=x86"
    steps:
      - uses: actions/checkout@v4
        with:
          repository: sccn/liblsl
      - run: sudo apt install -y libpugixml-dev
        if: ${{ runner.os == 'Linux' }}
      - name: Configure CMake
        run: |
          cmake --version
          cmake -S . -B build \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=${PWD}//install \
            -DLSL_BUILD_STATIC=ON \
            ${{ matrix.cmake_extra }}
      - run: cmake -DLSL_UNIXFOLDERS=ON build
        if: ${{ runner.os == 'Linux' }}
      - run: cmake --build build --config Release -j --target install
      - run: tar czf liblsl-static-${{ matrix.os }}.tar.gz install
      - uses: actions/upload-artifact@v4
        with:
          name: liblsl-static-${{ matrix.os }}
          path: liblsl-static-${{ matrix.os }}.tar.gz

  labrecorder:
    if: ${{ github.event_name != 'pull_request' || github.event.pull_request.draft == false }}
    needs: liblsl
    name: labrecorder on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            cmake_extra: "-DCPACK_DEBIAN_PACKAGE_SHLIBDEPS=ON"
          - os: ubuntu-22.04
            cmake_extra: "-DCPACK_DEBIAN_PACKAGE_SHLIBDEPS=ON"
          - os: ubuntu-20.04
            cmake_extra: "-DCPACK_DEBIAN_PACKAGE_SHLIBDEPS=ON"
          - os: macos-latest
            cmake_extra: ""
          - os: windows-latest
            cmake_extra: "-T v142,host=x86"
    steps:
      - uses: actions/checkout@v4
      - run: sudo apt install qtbase5-dev
        if: ${{ matrix.os == 'ubuntu-20.04' }}
      - run: sudo apt install qt6-base-dev freeglut3-dev
        if: ${{ matrix.os == 'ubuntu-22.04' || matrix.os == 'ubuntu-latest' }}
      - uses: jurplel/install-qt-action@v3
        with:
          version: "6.4.0"
          arch: "win64_msvc2019_64"
        if: ${{ runner.os == 'Windows' }}
      - run: brew install qt
        if: ${{ runner.os == 'macOS' }}
      - uses: actions/download-artifact@v4
        with:
          name: liblsl-static-${{ matrix.os }}
      - name: Unpack the static liblsl
        run: tar xzf liblsl-static-${{ matrix.os }}.tar.gz
      - name: Configure CMake
        run: |
          cmake --version
          cmake -S . -B build \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=${PWD}//install_labrecorder \
            -DCPACK_PACKAGE_DIRECTORY=${PWD}//package \
            -DLSL_INSTALL_ROOT="${PWD}//install" \
            ${{ matrix.cmake_extra }}
      - run: cmake -DLSL_UNIXFOLDERS=ON build
        if: ${{ runner.os == 'Linux' }}
      - run: cmake --build build --config Release -j --target install
      - name: Package
        run: |
          export LD_LIBRARY_PATH=$Qt5_DIR/lib:$Qt6_DIR/lib:$LD_LIBRARY_PATH
          cmake --build build --config Release -j --target package
          cmake -E remove_directory package/_CPack_Packages
      - uses: actions/upload-artifact@v4
        with:
          name: labrecorder-${{ matrix.os }}
          path: package/LabRecorder*

  publish:
    if: ${{ github.event_name == 'release' }}
    needs: labrecorder
    name: publish
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      id-token: write
      contents: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: labrecorder-*
          merge-multiple: true
          path: dist
      - uses: softprops/action-gh-release@v2
        with:
          files: dist/*
          tag_name: ${{ github.event.release.tag_name }}
